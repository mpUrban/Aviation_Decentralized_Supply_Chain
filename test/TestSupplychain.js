//1 events

// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within

// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var sn = 1
    const ownerID = accounts[0]
    const originShopID = accounts[1]
    const originShopName = "Av MRO Shop"
    const originShopInformation = "Cincy"
    const originShopLatitude = "39.103119"
    const originShopLongitude = "-84.512016"
    var productID = sku + sn
    const productNotes = "Fan Disk - LLP"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    // const distributorID = accounts[2]
    const storeID = accounts[3]
    const buyerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    // Available Accounts
    // ==================
    // (0) 0x0782140de231a91c2cef8c830107d995043cb2cc (~100 ETH)
    // (1) 0x36a2b46892a90630e54c58bb08b0cb4dcc1e1cfd (~100 ETH)
    // (2) 0x02b5a9ffb677b37235d0223a5692ad2b190826ad (~100 ETH)
    // (3) 0x5c789066430773ca1bbc6f1544b9b6990bdb3e2c (~100 ETH)
    // (4) 0x2f6bbd07152b5d034177a83d695c81b7b5989742 (~100 ETH)
    // (5) 0x1072062d00ee9b4e13a83c3dd94959aa75f6c71b (~100 ETH)
    // (6) 0xf9e04ee365cc8358469668be7e9ed19bc2369ff3 (~100 ETH)
    // (7) 0x9688ebb2ffdac95552df7f75fa0c2b3922a227b6 (~100 ETH)
    // (8) 0x1b1d56b4676d73bbe035bea5edfb50ade94b826b (~100 ETH)
    // (9) 0xcb04f72af7d03797d55ebb2517b905e1766da753 (~100 ETH)
    

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Shop: accounts[1] ", accounts[1])
    console.log("Other: accounts[2] ", accounts[2])
    console.log("Store: accounts[3] ", accounts[3])
    console.log("Buyer: accounts[4] ", accounts[4])


    it("Can instantiate the contract", async () => {
        
        const supplyChain = await SupplyChain.deployed()
        let result = await supplyChain;
        assert.exists(result, "contract is instantiated");

      })


    it("Can remove Item", async () => {
        const supplyChain = await SupplyChain.deployed()
        
        await supplyChain.removeItem(
            sku,
            originShopID,
            originShopName,
            originShopInformation,
            originShopLatitude,
            originShopLongitude,
            productNotes,
            { from: accounts[1], gas: 1000000 }
        );
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        // item vector index relates to fetchItemBufferOne
        assert.equal(itemBufferOne[0].toString(), sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
    });




    // 2nd Test
    it("Testing smart contract function cleanInspectItem() that allows a shop to clean/inspect part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var cleanInspectEvent = false;
        
        // Mark an item as cleanInspect by calling function processtItem()
        await supplyChain.cleanInspectItem(sn,{from: originShopID, gas: 1000000});
        
        // Watch the emitted event Built()
        var event = supplyChain.CleanInspect()
        await event.watch((err, res) => {
            cleanInspectEvent = true
        })
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo CleanInspect State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 1, 'state check failed')
        
    })    

    // 3rd Test
    it("Testing smart contract function shipItem() that allows a shop to ship the item", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var shippedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            shippedEvent = true
        })
        

        // Mark an item as cleanInspect by calling function processtItem()
        await supplyChain.shipItem(sn,{from: originShopID, gas: 1000000});
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Shipped State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 2, 'state check failed')
        
    })    

    // 4th Test
    it("Testing smart contract function receiveItem() that allows a store to receive a part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var receivedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            receivedEvent = true
        })
        

        // Mark an item as cleanInspect by calling function processtItem()
        await supplyChain.receiveItem(sn,productPrice,{from: originShopID, gas: 1000000});
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        // console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Received State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 3, 'state check failed')
          
    })    

    // 5th Test
    it("Testing smart contract function inspectItem() that allows a store to inspect a part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var inspectedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Inspected()
        await event.watch((err, res) => {
            inspectedEvent = true
        })
        

        // Mark an item as cleanInspect by calling function processtItem()
        await supplyChain.inspectItem(sn,{from: originShopID, gas: 1000000});
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        // console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Inspected State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 4, 'state check failed')
        
    })    

    // 6th Test
    it("Testing smart contract function repairItem() that allows a store to repair the part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        var repairedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Repaired()
        await event.watch((err, res) => {
            repairedEvent = true
        })
        
        await supplyChain.repairItem(sn,{from: originShopID, gas: 1000000});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Repaired State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 5, 'state check failed')
              
    })    
  

    // 8th Test
    it("Testing smart contract function buyItem() that allows a consumer to buy a part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        var purchasedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            purchasedEvent = true
        })
        
        await supplyChain.buyItem(sn,{from: originShopID, gas: 1000000});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Purchased State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 6, 'state check failed')
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn, {from: originShopID, gas: 1000000})

        // console.log("itemBufferOne: ", itemBufferOne);
        
        assert.equal(itemBufferOne[0].toString(), sku, 'error: invalid sku')
        assert.equal(itemBufferOne[1].toString(), sn, 'error: invalid sn')
        assert.equal(itemBufferOne[3].toString(), originShopID, 'error: invalid originShopID')
        assert.equal(itemBufferOne[4].toString(), originShopName, 'error: invalid originShopName')
        assert.equal(itemBufferOne[5].toString(), originShopInformation, 'error: invalid originShopInformation')
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, 'error: invalid originShopLatitude')
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, 'error: invalid originShopLongitude')
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        // console.log("itemBufferTwo: ", itemBufferTwo);
        // console.log("itemBufferTwo ProductID: ", itemBufferTwo[2].toString());
        
        assert.equal(itemBufferTwo[0].toString(), sku, 'error: invalid sku')
        assert.equal(itemBufferTwo[1].toString(), sn, 'error: invalid sn')
        assert.equal(itemBufferTwo[2].toString(), productID, 'error: invalid productID')
        assert.equal(itemBufferTwo[3].toString(), productNotes, 'error: invalid productNotes')
        // assert.equal(itemBufferTwo[4].toString(), productPrice, 'error: invalid productPrice')
        assert.equal(itemBufferTwo[5], 6, 'error: invalid itemState')
        // need to call from appropriate address
        // assert.equal(itemBufferTwo[6].toString(), storeID, 'error: invalid storeID')
        // assert.equal(itemBufferTwo[7].toString(), buyerID, 'error: invalid buyerID')
        
    })

});