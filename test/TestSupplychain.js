//1 events

// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within

// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var sn = 1
    const ownerID = accounts[0]
    const originShopID = accounts[1]
    const originShopName = "Av MRO Shop"
    const originShopInformation = "Cincy"
    const originShopLatitude = "39.103119"
    const originShopLongitude = "-84.512016"
    var productID = sku + sn
    console.log('ProductID: ',productID)
    const productNotes = "Fan Disk - LLP"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    // const distributorID = accounts[2]
    const storeID = accounts[3]
    const buyerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Shop: accounts[1] ", accounts[1])
    console.log("Other: accounts[2] ", accounts[2])
    console.log("Store: accounts[3] ", accounts[3])
    console.log("Buyer: accounts[4] ", accounts[4])


    it("Can instantiate the contract", async () => {
        
        const supplyChain = await SupplyChain.deployed()
        let result = await supplyChain;
        assert.exists(result, "contract is instantiated");

      })


    it("Can remove Item", async () => {
        const supplyChain = await SupplyChain.deployed()
        
        await supplyChain.removeItem(
            sku,
            originShopID,
            originShopName,
            originShopInformation,
            originShopLatitude,
            originShopLongitude,
            productNotes,
            { from: accounts[1], gas: 1000000 }
        );
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        // item vector index relates to fetchItemBufferOne
        assert.equal(itemBufferOne[0].toString(), sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
    });




    // 2nd Test
    it("Testing smart contract function cleanInspectItem() that allows a shop to clean/inspect part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var cleanInspectEvent = false;
        
        // Mark an item as cleanInspect by calling function processtItem()
        await supplyChain.cleanInspectItem(sn,{from: originShopID, gas: 1000000});
        
        // Watch the emitted event Built()
        var event = supplyChain.CleanInspect()
        await event.watch((err, res) => {
            cleanInspectEvent = true
        })
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo CleanInspect State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 1, 'state check failed')
        
    })    

    // 3rd Test
    it("Testing smart contract function shipItem() that allows a shop to ship the item", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var shippedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            shippedEvent = true
        })
        

        // Mark an item as cleanInspect by calling function processtItem()
        await supplyChain.shipItem(sn,{from: originShopID, gas: 1000000});
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Shipped State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 2, 'state check failed')
        
    })    

    // 4th Test
    it("Testing smart contract function receiveItem() that allows a store to receive a part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var receivedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            receivedEvent = true
        })
        

        // Mark an item as cleanInspect by calling function processtItem()
        await supplyChain.receiveItem(sn,productPrice,{from: originShopID, gas: 1000000});
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        // console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Received State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 3, 'state check failed')
          
    })    

    // 5th Test
    it("Testing smart contract function inspectItem() that allows a store to inspect a part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var inspectedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Inspected()
        await event.watch((err, res) => {
            inspectedEvent = true
        })
        

        // Mark an item as cleanInspect by calling function processtItem()
        await supplyChain.inspectItem(sn,{from: originShopID, gas: 1000000});
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        // console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Inspected State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 4, 'state check failed')
        
    })    

    // 6th Test
    it("Testing smart contract function repairItem() that allows a store to repair the part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        var repairedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Repaired()
        await event.watch((err, res) => {
            repairedEvent = true
        })
        
        await supplyChain.repairItem(sn,{from: originShopID, gas: 1000000});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Repaired State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 5, 'state check failed')
              
    })    
  

    // 8th Test
    it("Testing smart contract function buyItem() that allows a consumer to buy a part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        var purchasedEvent = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            purchasedEvent = true
        })
        
        await supplyChain.buyItem(sn,{from: originShopID, gas: 1000000});
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn)
        
        //console.log("itemBufferOne: ", itemBufferOne);

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        //console.log("itemBufferTwo: ", itemBufferTwo);
        //console.log("itemBufferTwo Purchased State Enum:", itemBufferTwo[5].toNumber())

        // Verify the result set
        assert.equal(itemBufferOne[0], sku, "sku match error");
        assert.equal(itemBufferOne[4].toString(), originShopName, "originShopName match error");
        assert.equal(itemBufferOne[5].toString(), originShopInformation, "originShopInformation match error");
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, "originShopLatitude match error");
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, "originShopLongitude match error");
        assert.equal(itemBufferTwo[3].toString(), productNotes, "productNotes match error");
        assert.equal(itemBufferTwo[5], 6, 'state check failed')
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        let itemBufferOne = await supplyChain.fetchItemBufferOne.call(sn, {from: originShopID, gas: 1000000})

        // console.log("itemBufferOne: ", itemBufferOne);
        
        assert.equal(itemBufferOne[0].toString(), sku, 'error: invalid sku')
        assert.equal(itemBufferOne[1].toString(), sn, 'error: invalid sn')
        assert.equal(itemBufferOne[3].toString(), originShopID, 'error: invalid originShopID')
        assert.equal(itemBufferOne[4].toString(), originShopName, 'error: invalid originShopName')
        assert.equal(itemBufferOne[5].toString(), originShopInformation, 'error: invalid originShopInformation')
        assert.equal(itemBufferOne[6].toString(), originShopLatitude, 'error: invalid originShopLatitude')
        assert.equal(itemBufferOne[7].toString(), originShopLongitude, 'error: invalid originShopLongitude')
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        let itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(sn)

        // console.log("itemBufferTwo: ", itemBufferTwo);
        // console.log("itemBufferTwo ProductID: ", itemBufferTwo[2].toString());
        
        assert.equal(itemBufferTwo[0].toString(), sku, 'error: invalid sku')
        assert.equal(itemBufferTwo[1].toString(), sn, 'error: invalid sn')
        assert.equal(itemBufferTwo[2].toString(), productID, 'error: invalid productID')
        assert.equal(itemBufferTwo[3].toString(), productNotes, 'error: invalid productNotes')
        // assert.equal(itemBufferTwo[4].toString(), productPrice, 'error: invalid productPrice')
        assert.equal(itemBufferTwo[5], 6, 'error: invalid itemState')
        // need to call from appropriate address
        // assert.equal(itemBufferTwo[6].toString(), storeID, 'error: invalid storeID')
        // assert.equal(itemBufferTwo[7].toString(), buyerID, 'error: invalid buyerID')
        
    })

});